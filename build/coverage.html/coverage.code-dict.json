{"/home/travis/build/npmtest/node-npmtest-amok/test.js":"/* istanbul instrument in package npmtest_amok */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-amok/lib.npmtest_amok.js":"/* istanbul instrument in package npmtest_amok */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_amok = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_amok = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-amok/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-amok && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_amok */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_amok\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_amok.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_amok.rollup.js'] =\n            local.assetsDict['/assets.npmtest_amok.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_amok.__dirname + '/lib.npmtest_amok.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-amok/node_modules/amok/lib/index.js":"var events = require('events');\nvar rdbg = require('rdbg');\nvar url = require('url');\nvar util = require('util');\nvar ware = require('ware');\n\nvar debug = util.debuglog('amok');\n\nfunction Runner() {\n  events.EventEmitter.call(this);\n\n  this.client = rdbg.createClient();\n  this.plugins = [];\n\n  this.settings = {};\n}\n\nutil.inherits(Runner, events.EventEmitter);\n\nRunner.prototype.get = function (name) {\n  return this.settings[name];\n};\n\nRunner.prototype.set = function (name, value) {\n  debug('set %s', name, value);\n  this.settings[name] = value;\n};\n\nRunner.prototype.use = function (fn) {\n  debug('use %s', fn._name || fn.name || '-');\n  this.plugins.push(fn);\n\n  return this;\n};\n\nRunner.prototype.run = function (callback) {\n  debug('run');\n\n  var stack = ware(this.plugins);\n  stack.run(this.client, this, callback);\n};\n\nRunner.prototype.connect = function (port, host, callback) {\n  this.run(function (error, client, runner) {\n    if (error) {\n      return this.emit('error', error);\n    }\n\n    if (callback) {\n      runner.on('connect', callback);\n    }\n\n    client.once('ready', function () {\n      debug('connect');\n      runner.emit('connect');\n    });\n\n    rdbg.get(port, host, function (error, targets) {\n      if (error) {\n        return runner.emit('error', error);\n      }\n\n      var target = targets.filter(function (target) {\n        return runner.get('url') === target.url;\n      })[0];\n\n      client.connect(target);\n    });\n  }.bind(this));\n};\n\nRunner.prototype.close = function () {\n  debug('close');\n\n  if (this.client) {\n    this.client.close();\n  }\n\n  this.emit('close');\n};\n\nfunction createRunner() {\n  return new Runner();\n}\n\nmodule.exports = new Runner();\n\nmodule.exports.createRunner = createRunner;\nmodule.exports.browser = require('./browser');\nmodule.exports.compiler = require('./compiler');\nmodule.exports.hotpatch = require('./hotpatch');\nmodule.exports.multiplexer = require('./multiplexer');\nmodule.exports.repl = require('./repl');\nmodule.exports.server = require('./server');\nmodule.exports.watch = require('./watch');\nmodule.exports.print = require('./print');\n","/home/travis/build/npmtest/node-npmtest-amok/node_modules/amok/lib/browser.js":"var web = require('browser_process');\nvar util = require('util');\nvar rdbg = require('rdbg');\nvar temp = require('temp');\nvar net = require('net');\n\nvar debug = util.debuglog('amok-browser');\n\nfunction plugin(port, command, args, options) {\n  if (typeof args === 'undefined') {\n    args = [];\n  } else {\n    args = args.slice(0);\n  }\n\n  return function browser(client, runner, done) {\n    var server = net.createServer();\n\n    server.once('error', function(error) {\n      debug('server error', error);\n      done(error);\n    });\n\n    server.once('listening', function() {\n      debug('server listening');\n\n      server.once('close', function() {\n        debug('server close');\n\n        var url = runner.get('url');\n\n        // TODO, move into browser_process.createProfile, deleting the first run file\n        // should be equivilent of providing these options, and be compatible with how firefox does it.\n        args.unshift('--no-first-run', '--no-default-browser-check');\n        var dirname = temp.path(command);\n        args.unshift.apply(args, web.options(command, {\n          profile: dirname,\n          url: url,\n          debug: port,\n        }));\n\n        debug('spawn %s %s', command, args.join(' '));\n        web.spawn(command, args, options, function (error, browser) {\n          if (error) {\n            debug('bail %s', error.description);\n            return done(error);\n          }\n\n          runner.once('close', function kill() {\n            debug('kill process');\n            browser.kill('SIGTERM');\n          });\n\n          debug('find %s', url);\n          setTimeout(function find(retry) {\n            rdbg.get(port, 'localhost', function (error, targets) {\n              if (error) {\n                targets = [];\n              }\n\n              var matches = targets.filter(function (target) {\n                return url === target.url;\n              });\n\n              if (matches.length > 0) {\n                debug('ready');\n                return done();\n              } else if (retry) {\n                return setTimeout(find, 1000, retry--);\n              }\n\n              if (error === undefined) {\n                error = new Error('Cannot find browser tab \\'' + url + '\\'');\n              }\n\n              debug('find error', error);\n              done(error);\n            });\n          }, 1000, 120);\n        });\n      });\n\n      debug('close server');\n      server.close();\n    });\n\n    debug('starting server on port', port);\n    server.listen(port);\n  };\n}\n\nmodule.exports = plugin;\n","/home/travis/build/npmtest/node-npmtest-amok/node_modules/amok/lib/compiler.js":"var fs = require('fs');\nvar path = require('path');\nvar script = require('compiler_process');\nvar temp = require('temp');\nvar util = require('util');\n\nvar debug = util.debuglog('amok-compiler');\n\nfunction plugin(command, args, options) {\n  if (typeof args == 'undefined') {\n    args = [];\n  } else {\n    args = args.slice(0);\n  }\n\n  return function compiler(client, runner, done) {\n    var entry = args.filter(function (arg) {\n      return arg.match(/(.js|.ts|.coffee)$/);\n    })[0];\n\n    var dirname = temp.mkdirSync(command);\n    var pathname = path.normalize(entry);\n    var basename = path.basename(pathname);\n    var filename = path.join(dirname, basename).replace(/\\.[^\\.]+$/, '.js');\n\n    var scripts = {};\n    scripts[pathname] = filename;\n    runner.set('scripts', scripts);\n\n    args.unshift.apply(args, script.options(command, {\n      outfile: filename,\n      watch: true,\n    }));\n\n    debug('spawn %s %s', command, args.join(' '));\n    script.spawn(command, args, options, function (error, compiler) {\n      if (error) {\n        debug('bail %s', error.description);\n        return done(error);\n      }\n\n      runner.once('close', function kill() {\n        debug('kill');\n        compiler.kill('SIGTERM');\n      });\n\n      debug('wait %s', filename);\n      process.nextTick(function wait() {\n        fs.stat(filename, function (error, stat) {\n          if (error || stat.size === 0) {\n            return process.nextTick(wait);\n          }\n\n          setTimeout(function () {\n            debug('ready');\n            done();\n          }, 250);\n        });\n      });\n    });\n  };\n}\n\nmodule.exports = plugin;\n","/home/travis/build/npmtest/node-npmtest-amok/node_modules/amok/lib/hotpatch.js":"var util = require('util');\nvar fs = require('fs');\nvar url = require('url');\nvar path = require('path');\n\nvar debug = util.debuglog('amok-hotpatch');\n\nfunction plugin() {\n  return function hotpatch(client, runner, done) {\n    var cwd = runner.get('cwd');\n    if (cwd) {\n      cwd = path.resolve(cwd);\n    } else {\n      cwd = process.cwd();\n    }\n\n    var scripts = {};\n    var watchers = {};\n\n    client.on('close', function () {\n      debug('close');\n      scripts = {};\n\n      Object.keys(watchers).forEach(function (key) {\n        watchers[key].close();\n      });\n\n      watchers = {};\n    });\n\n    client.on('connect', function () {\n      debug('connect');\n\n      client.debugger.on('clear', function () {\n        debug('clear');\n        scripts = {};\n\n        Object.keys(watchers).forEach(function (key) {\n          watchers[key].close();\n        });\n\n        watchers = {};\n      });\n\n      client.debugger.on('scriptParse', function (script) {\n        debug('parse %s', util.inspect(script));\n\n        var uri = url.parse(script.url);\n        var filename = null;\n        var sources = runner.get('scripts') || {};\n\n        if (uri.protocol === 'file:') {\n          filename = path.normalize(uri.pathname);\n          if (filename.match(/^\\\\[a-zA-Z]:\\\\/)) {\n            filename = filename.slice(1);\n          }\n        } else if (uri.protocol === 'http:') {\n          filename = uri.pathname.slice(1);\n          if (sources[path.normalize(filename)]) {\n            filename = path.resolve(sources[path.normalize(filename)]);\n          } else {\n            filename = path.resolve(cwd, filename);\n          }\n        }\n\n        if (!filename) {\n          return;\n        }\n\n        scripts[filename] = script;\n        if (watchers[filename]) {\n          return;\n        }\n\n        var dirname = path.dirname(filename);\n\n        debug('watch directory %s', dirname);\n        var watcher = fs.watch(dirname);\n        watchers[dirname] = watcher;\n\n        var streams = {};\n        watcher.on('change', function (event, filename) {\n          if (!filename) {\n            return;\n          }\n\n          filename = path.resolve(dirname, filename);\n\n          var script = scripts[filename];\n          if (!script) {\n            return;\n          }\n\n          debug(event, filename);\n          if (streams[filename]) {\n            return;\n          }\n\n          var source = '';\n          var stream = fs.createReadStream(filename);\n          streams[filename] = stream;\n\n          stream.setEncoding('utf-8');\n          stream.on('data', function(chunk) {\n            source += chunk;\n          });\n\n          stream.on('end', function() {\n            streams[filename] = null;\n\n            if (source.length === 0) {\n              return;\n            }\n\n            debug('patch script %s (%d bytes) ', script.url, source.length);\n            client.debugger.setScriptSource(script, source, function (error, result) {\n              if (error) {\n                debug('set source error %s', util.inspect(error));\n                return client.emit('error', error);\n              }\n\n              var detail = JSON.stringify({\n                detail: {\n                  filename: path.relative(cwd, filename),\n                  source: source,\n                }\n              });\n\n              var cmd = 'var event = new CustomEvent(\\'patch\\',' +\n              detail + ');\\nwindow.dispatchEvent(event);';\n\n              debug('evaluate patch event');\n              client.runtime.evaluate(cmd, function (error) {\n                if (error) {\n                  debug('evaluate error %s', util.inspect(error));\n                  return client.emit('error', error);\n                }\n              });\n            });\n          });\n        });\n      });\n\n      client.debugger.enable(function (error) {\n        if (error) {\n          return client.emit('error', error);\n        }\n\n        debug('debugger');\n      });\n\n      client.runtime.enable(function (error) {\n        if (error) {\n          return client.emit('error', error);\n        }\n\n        debug('runtime');\n      });\n    });\n\n    debug('done');\n    done();\n  };\n}\n\nmodule.exports = plugin;\n","/home/travis/build/npmtest/node-npmtest-amok/node_modules/amok/lib/multiplexer.js":"var http = require('http');\nvar url = require('url');\nvar ws = require('ws');\nvar util = require('util');\n\nfunction plugin(port, host, debugPort, debugHost) {\n  return function multiplexer(client, runner, done) {\n    // TODO The meat of this implementation should probaly go into an rdbg adapter module.\n    var upstream = {};\n\n    var server = http.createServer();\n    server.on('request', function (request, response) {\n      var upstreamRequest = http.request({\n        port: debugPort,\n        hostname: debugHost,\n        path: request.url,\n      });\n\n      if (request.url == '/json' || request.url === '/json/list') {\n        upstreamRequest.on('response', function (upstreamResponse) {\n          var data = '';\n\n          upstreamResponse.on('data', function (chunk) {\n            data += chunk;\n          });\n\n          upstreamResponse.on('end', function () {\n            var targets = JSON.parse(data);\n            targets.forEach(function (target) {\n              var webSocketDebuggerUrl = Object.keys(upstream).filter(function(key) {\n                return key.search(target.id);\n              })[0];\n\n              if (target.webSocketDebuggerUrl || webSocketDebuggerUrl) {\n                target.webSocketDebuggerUrl = url.format({\n                  protocol: 'ws',\n                  slashes: true,\n                  port: port,\n                  hostname: host,\n                  pathname: '/devtools/page/' + target.id,\n                });\n              }\n\n              if (target.webSocketDebuggerUrl) {\n                target.devtoolsFrontendUrl = util.format('/devtools/inspector.html?ws=%s', target.webSocketDebuggerUrl.slice(5));\n              }\n            });\n\n            response.end(JSON.stringify(targets, undefined, 2));\n          });\n        });\n\n        upstreamRequest.end();\n      } else {\n        upstreamRequest.on('response', function (upstreamResponse) {\n          upstreamResponse.pipe(response);\n        });\n\n        upstreamRequest.end();\n      }\n    });\n\n    var socket = ws.createServer({ server: server });\n    socket.on('connection', function (connection) {\n      var upstreamUrl = url.format({\n        protocol: 'ws',\n        slashes: true,\n        hostname: debugHost,\n        port: debugPort,\n        pathname: connection.upgradeReq.url,\n      });\n\n      if (!upstream[upstreamUrl]) {\n        var upstreamConnection = ws.createConnection(upstreamUrl);\n        upstream[upstreamUrl] = {\n          localId: 0,\n          connection: upstreamConnection,\n          connections: [connection],\n          mappings: {},\n          notifications: [],\n        };\n\n        upstreamConnection.on('close', function() {\n          upstream[upstreamUrl].connections.forEach(function(connection) {\n            connection.close();\n          });\n\n          delete upstream[upstreamUrl];\n        });\n\n        upstreamConnection.on('message', function (data) {\n          var message = JSON.parse(data);\n\n          if (message.id === undefined) {\n            upstream[upstreamUrl].notifications.push(JSON.parse(data));\n            upstream[upstreamUrl].connections.forEach(function (connection) {\n              connection.send(data);\n            });\n          } else {\n            var mappings = upstream[upstreamUrl].mappings[message.id];\n            message.id = mappings.id;\n            mappings.connection.send(JSON.stringify(message));\n          }\n        });\n      } else {\n        upstream[upstreamUrl].connections.push(connection);\n      }\n\n      connection.notifications = upstream[upstreamUrl].notifications.slice(0);\n      connection.upstream = upstream[upstreamUrl];\n\n      connection.on('message', function (data) {\n        var upstream = connection.upstream;\n\n        var message = JSON.parse(data);\n\n        if (message.method && message.method.match(/enable$/)) {\n          var domain = message.method.split('.')[0];\n\n          connection.notifications = connection.notifications.filter(function (notification) {\n            if (notification.method.search(domain)) {\n              connection.send(JSON.stringify(notification));\n              return false;\n            }\n\n            return true;\n          });\n        }\n\n        var local = upstream.localId++;\n        var remote = message.id;\n        message.id = local;\n\n        upstream.mappings[local] = {\n          connection: connection,\n          id: remote,\n          message: data\n        };\n\n        if (upstream.connection.readyState == 0) {\n          upstream.connection.once('open', function () {\n            upstream.connection.send(JSON.stringify(message));\n          });\n        } else {\n          upstream.connection.send(JSON.stringify(message));\n        }\n      });\n\n      connection.on('close', function () {\n        var upstream = connection.upstream;\n        var index = upstream.connections.indexOf(connection);\n        if (index > -1) {\n          upstream.connections.splice(index, 1);\n        }\n      });\n    });\n\n    server.on('error', function (error) {\n      done(error);\n    });\n\n    server.on('listening', function () {\n      done();\n    });\n\n    server.listen(port, host);\n  }\n}\n\nmodule.exports = plugin;","/home/travis/build/npmtest/node-npmtest-amok/node_modules/amok/lib/repl.js":"var repls = require('repl');\nvar util = require('util');\n\nvar debug = util.debuglog('amok-repl');\n\nfunction plugin(input, output, options) {\n  if (typeof options === 'undefined') {\n    options = {};\n  }\n\n  return function repl(client, runner, done) {\n    debug('start');\n    var repl = repls.start({\n      input: input,\n      output: output,\n      useColors: options.useColors\n    });\n\n    repl.on('exit', function() {\n      runner.close();\n    });\n\n    repl.eval = function (cmd, context, filename, callback) {\n      client.runtime.evaluate(cmd, function (error, output) {\n        if (error) {\n          return callback(error);\n        }\n\n        var result = output.result;\n        if (result.type === 'string') {\n          return callback(null, result.value);\n        } else if (result.type === 'function') {\n          var fn = new Function('return ' + result.description.replace('[native code]', '/* remote code */'));\n          return callback(null, fn());\n        } else if (result.subtype === 'error') {\n          return callback(result.description);\n        } else if (result.type === 'object') {\n          var obj = {};\n          return callback(null, obj);\n        } else {\n          return callback(null, eval(result.value));\n        }\n      });\n    };\n\n    repl.complete = function (line, callback) {\n      callback([], line);\n    };\n\n    client.console.on('data', function (message) {\n      repl.output.clearLine();\n      repl.output.cursorTo(0);\n      repl.output.write(message.text + '\\n');\n      repl.prompt(true);\n    });\n\n    client.on('connect', function () {\n      client.console.enable(function (error) {\n        if (error) {\n          return client.emit('error', error);\n        }\n\n        debug('console enabled');\n      });\n\n      client.runtime.enable(function (error) {\n        if (error) {\n          return client.emit('error');\n        }\n\n        debug('runtime');\n      });\n    });\n\n    debug('ready');\n    done();\n  };\n}\n\nmodule.exports = plugin;\n","/home/travis/build/npmtest/node-npmtest-amok/node_modules/amok/lib/server.js":"var fs = require('fs');\nvar http = require('http');\nvar mime = require('mime');\nvar path = require('path');\nvar url = require('url');\nvar util = require('util');\n\nvar debug = util.debuglog('amok-server');\n\nfunction plugin(port, host) {\n  return function server(client, runner, done) {\n    var server = http.createServer();\n\n    server.once('error', function (error) {\n      done(error);\n    });\n\n    server.once('listening', function ready() {\n      runner.set('url', url.format({\n        protocol: 'http',\n        port: port,\n        hostname: host,\n        pathname: '/'\n      }));\n\n      debug('ready');\n      done();\n    });\n\n    runner.once('close', function close() {\n      debug('close');\n      server.close();\n    });\n\n    server.on('request', function handle(request, response) {\n      debug('handle %s', request.url);\n\n      var pathname = url.parse(request.url).pathname;\n      if (pathname === '/') {\n        pathname = '/index.html';\n      }\n\n      var scripts = runner.get('scripts') || {};\n      var cwd = runner.get('cwd') || process.cwd();\n      var filename = scripts[path.normalize(pathname.slice(1))] || path.normalize(pathname.slice(1));\n\n      if (!path.isAbsolute(filename)) {\n        filename = path.join(cwd, filename);\n      }\n\n      fs.stat(filename, function (error, stat) {\n        response.setHeader('content-type', mime.lookup(filename));\n\n        if (error) {\n          if (pathname === '/index.html') {\n            debug('generate index.html');\n\n            response.write('<!DOCTYPE html><html><head>');\n            response.write('<title>' + path.basename(cwd) + '</title>');\n            response.write('</head><body>');\n\n            if (scripts) {\n              Object.keys(scripts).forEach(function (src) {\n                response.write('<script src=\"' + src + '\"></script>');\n              });\n            }\n\n            return response.end('</body></html>');\n          } else if (pathname === '/favicon.ico') {\n            debug('generate favicon.ico');\n            return response.end();\n          } else {\n            debug('404 %s', pathname);\n            response.statusCode = 404;\n            return response.end('404');\n          }\n        }\n\n        if (stat.isFile()) {\n          debug('stream %s', filename);\n          fs.createReadStream(filename).pipe(response);\n        } else {\n          debug('403 %s', pathname);\n          response.statusCode = 403;\n          return response.end('403');\n        }\n      });\n    });\n\n    server.listen(port, host);\n  };\n}\n\nmodule.exports = plugin;\n","/home/travis/build/npmtest/node-npmtest-amok/node_modules/amok/lib/watch.js":"var chokidar = require('chokidar');\nvar fs = require('fs');\nvar path = require('path');\nvar url = require('url');\nvar util = require('util');\n\nvar debug = util.debuglog('amok-watch');\n\nfunction plugin(glob) {\n  return function watch(client, runner, done) {\n    var cwd = runner.get('cwd');\n    if (cwd) {\n      cwd = path.resolve(cwd);\n    } else {\n      cwd = process.cwd();\n    }\n\n    debug('watch %s', glob);\n\n    var watcher = chokidar.watch(glob, {\n      ignoreInitial: true,\n      cwd: cwd,\n    });\n\n    watcher.once('error', function error(error) {\n      debug('error %s', util.inspect(error));\n      done(error);\n    });\n\n    watcher.once('ready', function ready() {\n      debug('ready');\n      done();\n    });\n\n    runner.once('close', function close() {\n      debug('close');\n      watcher.close();\n    });\n\n    client.on('close', function () {\n      watcher.removeAllListeners('all');\n    });\n\n    client.on('connect', function () {\n      watcher.on('all', function emit(event, filename) {\n        debug('%s %s', event, filename);\n\n        var detail = JSON.stringify({\n          detail: {\n            filename: url.resolve('/', filename).slice(1)\n          }\n        });\n\n        var cmd = 'var event = new CustomEvent(\\'' + event + '\\',' +\n          detail + ');\\nwindow.dispatchEvent(event);';\n\n        client.runtime.evaluate(cmd, function (error, result) {\n          if (error) {\n            debug('error %s', error.description);\n            return client.emit('error', error);\n          }\n        });\n      });\n\n      client.runtime.enable(function (error) {\n        if (error) {\n          return client.emit('error', error);\n        }\n\n        debug('runtime');\n      });\n    });\n  };\n}\n\nmodule.exports = plugin;\n","/home/travis/build/npmtest/node-npmtest-amok/node_modules/amok/lib/print.js":"var util = require('util');\n\nvar debug = util.debuglog('amok-print');\n\nfunction plugin(output) {\n  return function print(client, runner, done) {\n    client.console.on('data', function (message) {\n      output.write(message.text + '\\n');\n    });\n\n    client.on('connect', function () {\n      client.console.enable(function (error) {\n        if (error) {\n          return client.emit('error', error);\n        }\n        debug('console');\n      });\n    });\n\n    debug('ready');\n    done();\n  };\n}\n\nmodule.exports = plugin;\n"}